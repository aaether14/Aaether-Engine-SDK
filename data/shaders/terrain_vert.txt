#version 330 core



layout(location = 0) in vec3 Positions;
layout(location = 1) in vec2 TexCoords;
layout(location = 2) in vec3 Normals;
layout(location = 3) in vec3 Tangents;





out vec2 UV;
out vec3 normals;
out vec3 worlds;
out vec4 eyePos;
out vec4 ShadowCoord;
out mat3 TBN;




uniform mat4 LightMatrix;
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;




void main(){

     

	 mat4 MV = (V * M);
	 gl_Position        =  (P * (MV * vec4(Positions, 1.0)));
	 eyePos             =  MV * vec4(Positions, 1.0);
	 UV                 =  TexCoords;
     normals            =  (M * vec4(Normals, 0.0)).xyz;
     worlds             =  (M * vec4(Positions, 1.0)).xyz;
	 vec3 tangents      =  (M * vec4(Tangents, 0.0)).xyz;  
	 ShadowCoord        =  LightMatrix * vec4(Positions, 1.0);
	 



	vec3 Normal = normalize(normals);
    vec3 Tangent = normalize(tangents);
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);
    vec3 Bitangent = cross(Tangent, Normal);  
	TBN = mat3(Tangent, Bitangent, Normal);



}



